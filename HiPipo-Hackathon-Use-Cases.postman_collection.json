{
	"info": {
		"_postman_id": "9e54cc99-4532-45c9-bae8-bdef4f7982ab",
		"name": "HiPipo-Hackathon-Use-Cases",
		"description": "#Author: sridevi.miriyala@modusbox.com#\n\nThis is the collection to use by the participants attending the Women in Fintech - HiPipo hackathon.\nThe whole collection is devided into per group and there are 3 groups corresponding to each currencies UGX, ZMW and EUR. Each group has 5 participants, which makes total 15 participants for this hackathon.\nThe participants are going to check the below usecases:\n\n1. First they will be checking the connectivity to the lab by hitting the request from the connectivity folder. There are 5 requests of this in each group, one request specific to each team.\nThe team is going to pick the one on their name and run and check all the tests are passing.\n\n2. Once the team successfully completes the connectivity test, they will be running the p2p interoperatble usecase.\n    In this use case, a transfer is being sent from a MSISDN from one DFSP/team from one group to a MSISDN from the other DFSP/team in the same group.\n    This is sending money from one person to another person in the same currency, using the MSISDNs.\n    Currently the scripts are created for amountType \"SEND\" and \"RECEIVE\" on one DFSP name. If the team wants to try rest of the combinations, that will give more handson on the applicaiton.\n    But remember, this p2p interoperable case is between the DFSP in teh same group.\n\n    Make sure the tests are all pass before you move on to the next usecase, which is Forex - cross currency usecase.\n    \n3. Merchant Payments. For this usecase, Merchant initiates a request to pay the amount by the customer via requestToPay. This request internally uses GET /parties to resolve the Payer/Sender/Customer of the funds and after that uses POST /transactionRequests which has the amount that the Merchant is requesting. Once this request is received by Payer/Sender/Customer FSP, they send a POST /requestToPayTransfer which internally calls Mojaloop POST /quotes. Once the Merchant FSP responds for POST /quotes with the fees/commision that they charge for the transaction, depending on the customer experience these fees/commission will be exchanged to the customer. Once the customer accpets the fees/commission, the Payer/Sender/Customer FSP sends a subsequent request PUT /requestToPayTransfer/{requestToPayTransferId}. This request internally makes a Mojaloop POST /transfers request which moves the funds from Customers account to Merchant's account.\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Group-0-UGX",
			"item": [
				{
					"name": "connectivity_test",
					"item": [
						{
							"name": "emoments-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d7660a8-1638-48de-af1b-92f97e9eaa61",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61cdcb07-3f6c-4e14-ad93-edfd10b0200f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"emoments",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "yougandaltd-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ec47604-fb44-4e9d-b785-37ec425692d1",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3edf98e1-969e-47b2-94f0-4ed28d509218",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256222222222\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://yougandaltd.hipipo.mojaloop-hackathon.io:4101/transfers",
									"protocol": "http",
									"host": [
										"yougandaltd",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4101",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "teamspec-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10c28057-f031-4c58-8b6b-11bf360f5a8c",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fc2977e2-5367-444e-93a7-56ef5e1fa265",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://teamspec.hipipo.mojaloop-hackathon.io:4201/transfers",
									"protocol": "http",
									"host": [
										"teamspec",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4201",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "wsacco-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f4b38d85-3821-414a-8ba2-647acf49ca64",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7af82e00-0ccd-4504-97c4-b5e611a3eb3b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256444444444\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://wsacco.hipipo.mojaloop-hackathon.io:4301/transfers",
									"protocol": "http",
									"host": [
										"wsacco",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4301",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "kanzucodeladies-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b97b5320-a1e7-4e5a-92cb-b0f69a13e09e",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4dd69301-5887-4b92-afe8-5448013e6f09",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256555555555\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://kanzucodeladies.hipipo.mojaloop-hackathon.io:4401/transfers",
									"protocol": "http",
									"host": [
										"kanzucodeladies",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4401",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_interoperable",
					"item": [
						{
							"name": "msisdn-to-msisdn",
							"item": [
								{
									"name": "emoments-to-teamspec SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "05f2f341-911e-487d-a75f-f0d283e1d509",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "972e023b-3d17-4612-bce0-04b509a3ba9d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "emoments-to-teamspec RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3a2f8c70-3adb-44c3-a127-db059bafbb4f",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "03ca2042-8043-40d2-9ae1-76b3ae691073",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "msisdn-to-bankaccount",
							"item": [
								{
									"name": "emoments-to-teamspec SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d525cdaa-e93d-483c-8547-ca7c072a4f3e",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e9622df1-693b-4c16-a953-aa4085427a9e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC013333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "emoments-to-teamspec RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "33aa7926-ce18-4ec6-8ede-a418aff3446b",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c1e66fcd-ac2f-4568-99ea-03a1568c6a86",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC013333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_forex",
					"item": [
						{
							"name": "UGX-to-EUR",
							"item": [
								{
									"name": "emoments-to-affinity(UGX to EUR) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "961f666f-e0a8-4a5a-84f2-199483a20f74",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "578947db-48fa-4daa-8ca1-89a7e41d8c49",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256111111111\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "emoments-to-affinity(UGX to EUR) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d4b92df0-d58e-419a-a05f-15ba72cbf4df",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "910fda39-b311-485c-8995-667d7dfee558",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256111111111\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UGX-to-ZMW",
							"item": [
								{
									"name": "kanzucodeladies-to-greengrab(UGX to ZMW) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c98940d5-6e3e-4a00-bdc7-1516abe5245f",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3fa6cca3-07d4-401b-9e1c-5fa7fe3db3b0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kanzucodeladies.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kanzucodeladies",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "kanzucodeladies-to-greengrab(UGX to ZMW) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3e55bfe9-af44-4259-865c-f6e26174a350",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4afd243a-6680-4c16-b079-3d23164d6435",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"ZMW\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kanzucodeladies.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kanzucodeladies",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_initiated_payments",
					"item": [
						{
							"name": "merchant_payments(merchant-to-MSISDN)",
							"item": [
								{
									"name": "yougandaltd-to-teamspec",
									"item": [
										{
											"name": "Yougandaltd-to-teamspec- POST /requestToPay",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "42866dd8-1d71-4c0c-9e88-abbdab265519",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(`homeTransactionId is: ${pm.variables.get('homeTransactionId')}`, function () {",
															"    pm.expect(jsonData.homeTransactionId).to.eql(pm.variables.get('homeTransactionId'));",
															"});",
															"",
															"pm.test(`from.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('BUSINESS');",
															"    pm.environment.set('requestToPayInitiatorIdType',jsonData.from.idType);",
															"});",
															"",
															"",
															"pm.test(`to.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is UGX`, function () {",
															"    pm.expect(jsonData.currency).to.eql('UGX');",
															"});",
															"",
															"pm.test(`amount is 10`, function () {",
															"    pm.expect(jsonData.amount).to.eql('10');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`transactionRequestId is not null`, function () {",
															"    pm.expect(jsonData.transactionRequestId).to.not.equal('');",
															"    pm.environment.set('transactionRequestId',jsonData.transactionRequestId);",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`requestToPayState is RECEIVED`, function () {",
															"    pm.expect(jsonData.requestToPayState).to.eql('RECEIVED');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "57fd27e6-d7d7-4902-9fee-dc8fad5b1531",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"pm.variables.set('homeTransactionId',uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"homeTransactionId\": \"{{homeTransactionId}}\",\n    \"from\": {\n        \"idType\": \"BUSINESS\",\n        \"idValue\": \"yougandaltdMerchant\",\n        \"displayName\": \"yougandaltd BusinessSolutions\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"scenario\":\"PAYMENT\",\n    \"initiator\":\"PAYEE\",\n    \"initiatorType\":\"BUSINESS\",\n    \"note\": \"test payment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://yougandaltd.hipipo.mojaloop-hackathon.io:4101/requestToPay",
													"protocol": "http",
													"host": [
														"yougandaltd",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4101",
													"path": [
														"requestToPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamspec - POST /requestToPayTransfer SEND",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b73acd57-8ef6-42f9-b2d5-412f32758c51",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`to.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is UGX`, function () {",
															"    pm.expect(jsonData.currency).to.eql('UGX');",
															"});",
															"",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is WAITING_FOR_QUOTE_ACCEPTANCE`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('WAITING_FOR_QUOTE_ACCEPTANCE');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is UGX`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('UGX');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil is  null`, function () {",
															"    pm.expect(jsonData.fulfil).to.equal(undefined);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"requestToPayTransactionId\": \"{{transactionRequestId}}\",\n  \"from\": {\n    \"displayName\": \"TeamSpec\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"256333333333\"\n  },\n  \"to\": {\n    \"idType\": \"{{requestToPayInitiatorIdType}}\",\n    \"idValue\": \"yougandaltdMerchant\",\n    \"fspId\": \"yougandaltd\"\n  },\n  \"amountType\": \"SEND\",\n  \"currency\": \"UGX\",\n  \"amount\": \"10\",\n  \"scenario\":\"PAYMENT\",\n  \"initiator\":\"PAYEE\",\n  \"initiatorType\":\"BUSINESS\",\n  \"note\": \"test payment\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamspec.hipipo.mojaloop-hackathon.io:4201/requestToPayTransfer",
													"protocol": "http",
													"host": [
														"teamspec",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4201",
													"path": [
														"requestToPayTransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamspec - PUT /requestToPayTransfer/{Id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "80ab428d-b507-4a13-bd21-8cef374ece41",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"pm.test(`to.idType is BISUNESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is UGX`, function () {",
															"    pm.expect(jsonData.currency).to.eql('UGX');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is UGX`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('UGX');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`otpResponse is null`, function () {",
															"    pm.expect(jsonData.otpResponse).to.eql(undefined);",
															"});",
															"",
															"pm.test(`fulfil is not null`, function () {",
															"    pm.expect(jsonData.fulfil).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.completedTimestamp is not null`, function () {",
															"    pm.expect(jsonData.fulfil.completedTimestamp).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.transferState is COMMITTED`, function () {",
															"    pm.expect(jsonData.fulfil.transferState).to.eql('COMMITTED');",
															"});",
															"",
															"pm.test(`fulfil.fulfilment is not null`, function () {",
															"    pm.expect(jsonData.fulfil.fulfilment).to.not.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"acceptQuote\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamspec.hipipo.mojaloop-hackathon.io:4201/requestToPayTransfer/{{transactionRequestId}}",
													"protocol": "http",
													"host": [
														"teamspec",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4201",
													"path": [
														"requestToPayTransfer",
														"{{transactionRequestId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e41e603-718f-4585-858a-de5920b8db04",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "467d573a-02b7-4777-a4fa-6cc60fa380a3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "#Author: sridevi.miriyala@modusbox.com#\nThese are called Merchant payments.\nThese are between the same currency DFSPs, no cross currency is allowed/tested at the moment.\nSo, a Merchant(BUSINESS_ID) from a DFSP  in Group-0 can send to a MSISDN from another DFSP in Group-0.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11c96188-75c5-49cc-b809-6bb906966f91",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f1f19ac-03b9-47bb-a88b-b6a216af9149",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Group-1-ZMW",
			"item": [
				{
					"name": "connectivity_test",
					"item": [
						{
							"name": "greengrab-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8d668f7e-3db3-4e55-b02b-65329ff753e3",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f706273-e96c-467c-a814-225d95a2dd7c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"greengrab",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "achors-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b4a7bf85-06f7-4800-bdf4-85cd8a1741a8",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51d78f52-ba53-4172-85b6-e9bc9a4c227c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260222222222\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://achors.hipipo.mojaloop-hackathon.io:4101/transfers",
									"protocol": "http",
									"host": [
										"achors",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4101",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "ugmart-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0f3e58d6-b7e5-4cbb-b2c2-81a1f1a8db97",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "738dbdb3-e846-4dfe-a982-4b7049ff3b5a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260333333333\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://ugmart.hipipo.mojaloop-hackathon.io:4201/transfers",
									"protocol": "http",
									"host": [
										"ugmart",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4201",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "hackgirls-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b7765b30-a9d8-4dfc-8f49-edfafcff0080",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "169238e5-2c7c-4238-8832-aee7e3d7d065",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260444444444\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://hackgirls.hipipo.mojaloop-hackathon.io:4301/transfers",
									"protocol": "http",
									"host": [
										"hackgirls",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4301",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "kameeza-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "502b13a7-48b8-4ce5-bdb6-17bdcfc504cb",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5160bd33-433c-4c6e-b8b3-effd296ce5c0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260555555555\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://kameeza.hipipo.mojaloop-hackathon.io:4401/transfers",
									"protocol": "http",
									"host": [
										"kameeza",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4401",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_interoperable",
					"item": [
						{
							"name": "msisdn-to-msisdn",
							"item": [
								{
									"name": "greengrab-to-ugmart SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ed765115-e4d8-4b88-bda9-d9dac204385d",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34233184-480d-44f1-b387-4052b365db24",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "greengrab-to-ugmart RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "43f3ede1-58a0-44c9-ac27-a7ceee600501",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fdff89f9-41be-4745-a6e9-2215d447d909",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260333333333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "msisdn-to-bankaccount",
							"item": [
								{
									"name": "greengrab-to-ugmart SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e93fafe7-eb19-42f6-afa0-dcefb9bf5952",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "16efad5a-2bf7-49b5-a019-046add39764a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC023333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "greengrab-to-ugmart RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1ee10d55-19c2-4d03-a868-41ba410249c0",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "edf3248a-fba2-40da-8ab8-9a1933c15422",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC023333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_forex",
					"item": [
						{
							"name": "ZMW-to-UGX",
							"item": [
								{
									"name": "ugmart-to-kanzucodeladies(ZMW to UGX) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d997a08-d414-4938-88ab-49d44763c085",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b5cbb000-af0d-42a7-b7d6-d2e9ec93b878",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260333333333\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"ZMW\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://ugmart.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"ugmart",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "ugmart-to-kanzucodeladies(ZMW to UGX) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0c8630ca-a207-4a70-aefc-f93727d9661a",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "27f77593-b351-494f-bce2-3a15716b5f07",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260333333333\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://ugmart.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"ugmart",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ZMW-to-EUR",
							"item": [
								{
									"name": "hackgirls-to-skycode(ZMW to EUR) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28f5a72f-55e1-444a-9ae6-25c499d0fb53",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8a4a44c1-0b30-4d1a-8f90-a456b9f671f3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260444444444\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978333333333\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"ZMW\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://hackgirls.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"hackgirls",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "hackgirls-to-skycode(ZMW to EUR) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5178efac-556a-4fcd-86e1-6ca775129c0f",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "823ecf1d-ae89-4bf1-9a6b-25360bd47109",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260444444444\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978333333333\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://hackgirls.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"hackgirls",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_initiated_payments",
					"item": [
						{
							"name": "business",
							"item": [
								{
									"name": "achors-to-kameeza",
									"item": [
										{
											"name": "achors-to-kameeza- POST /requestToPay",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2d089fc2-ede8-4743-8689-72b220021e46",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(`homeTransactionId is: ${pm.variables.get('homeTransactionId')}`, function () {",
															"    pm.expect(jsonData.homeTransactionId).to.eql(pm.variables.get('homeTransactionId'));",
															"});",
															"",
															"pm.test(`from.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('BUSINESS');",
															"    pm.environment.set('requestToPayInitiatorIdType',jsonData.from.idType);",
															"});",
															"",
															"",
															"pm.test(`to.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ZMW`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('ZMW');",
															"});",
															"",
															"pm.test(`amount is 10`, function () {",
															"    pm.expect(jsonData.amount).to.eql('10');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`transactionRequestId is not null`, function () {",
															"    pm.expect(jsonData.transactionRequestId).to.not.equal('');",
															"    pm.environment.set('transactionRequestId',jsonData.transactionRequestId);",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`requestToPayState is RECEIVED`, function () {",
															"    pm.expect(jsonData.requestToPayState).to.eql('RECEIVED');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1b46639f-f897-4a49-a354-f138e890fa44",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"pm.variables.set('homeTransactionId',uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"homeTransactionId\": \"{{homeTransactionId}}\",\n    \"from\": {\n        \"idType\": \"BUSINESS\",\n        \"idValue\": \"achorsMerchant\",\n        \"displayName\": \"Achors Mobiles\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260555555555\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"scenario\":\"PAYMENT\",\n    \"initiator\":\"PAYEE\",\n    \"initiatorType\":\"BUSINESS\",\n    \"note\": \"test payment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://achors.hipipo.mojaloop-hackathon.io:4101/requestToPay",
													"protocol": "http",
													"host": [
														"achors",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4101",
													"path": [
														"requestToPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "kameeza - POST /requestToPayTransfer SEND",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45279801-e0d0-4f58-a248-2b1ce8fc5c16",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`to.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ZMW}`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('ZMW');",
															"});",
															"",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is WAITING_FOR_QUOTE_ACCEPTANCE`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('WAITING_FOR_QUOTE_ACCEPTANCE');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is ZMW}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('ZMW');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil is  null`, function () {",
															"    pm.expect(jsonData.fulfil).to.equal(undefined);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"requestToPayTransactionId\": \"{{transactionRequestId}}\",\n  \"from\": {\n    \"displayName\": \"Kameeza\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"260555555555\"\n  },\n  \"to\": {\n    \"idType\": \"{{requestToPayInitiatorIdType}}\",\n    \"idValue\": \"achorsMerchant\",\n    \"fspId\": \"achors\"\n  },\n  \"amountType\": \"SEND\",\n  \"currency\": \"ZMW\",\n  \"amount\": \"10\",\n  \"scenario\":\"PAYMENT\",\n  \"initiator\":\"PAYEE\",\n  \"initiatorType\":\"BUSINESS\",\n  \"note\": \"test payment\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://kameeza.hipipo.mojaloop-hackathon.io:4401/requestToPayTransfer",
													"protocol": "http",
													"host": [
														"kameeza",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4401",
													"path": [
														"requestToPayTransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "kameeza - PUT /requestToPayTransfer/{Id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "666af949-36ae-410f-a5b1-ffc9a472ee96",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"pm.test(`to.idType is BISUNESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ZMW}`, function () {",
															"    pm.expect(jsonData.currency).to.eql('ZMW');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is ZMW}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('ZMW');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`otpResponse is null`, function () {",
															"    pm.expect(jsonData.otpResponse).to.eql(undefined);",
															"});",
															"",
															"pm.test(`fulfil is not null`, function () {",
															"    pm.expect(jsonData.fulfil).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.completedTimestamp is not null`, function () {",
															"    pm.expect(jsonData.fulfil.completedTimestamp).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.transferState is COMMITTED`, function () {",
															"    pm.expect(jsonData.fulfil.transferState).to.eql('COMMITTED');",
															"});",
															"",
															"pm.test(`fulfil.fulfilment is not null`, function () {",
															"    pm.expect(jsonData.fulfil.fulfilment).to.not.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"acceptQuote\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://kameeza.hipipo.mojaloop-hackathon.io:4401/requestToPayTransfer/{{transactionRequestId}}",
													"protocol": "http",
													"host": [
														"kameeza",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4401",
													"path": [
														"requestToPayTransfer",
														"{{transactionRequestId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Group-2-EUR",
			"item": [
				{
					"name": "connectivity_test",
					"item": [
						{
							"name": "alpteqictsols-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d019c3a-0041-4c17-ad5a-63bb29914585",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45f71891-9b0f-4e4c-af98-4caa1ad3bcff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"alpteqictsols",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "affinity-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1c3f3bea-544a-439c-a25c-db3c41cfb89d",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a032200f-bd55-4ada-878e-d15f39d60ada",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978222222222\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://affinity.hipipo.mojaloop-hackathon.io:4101/transfers",
									"protocol": "http",
									"host": [
										"affinity",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4101",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "skycode-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8609ae27-32fa-443c-af4b-75b96dbf78c6",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "451b8ab7-ecc1-46c8-8293-bd2538faabb9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978333333333\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"alpteqictsols",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "teamtime-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "99fe516e-a7d6-4f33-ac32-2bf8a02ade96",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a62bf92c-3b2a-462f-a813-4c370875f1b8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978444444444\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://teamtime.hipipo.mojaloop-hackathon.io:4301/transfers",
									"protocol": "http",
									"host": [
										"teamtime",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4301",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "kuzimba-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a02fcecf-b0d7-4081-a28d-4db30d96941e",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "351e65d4-eba0-4192-bd1a-8c40dde82769",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978555555555\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://kuzimba.hipipo.mojaloop-hackathon.io:4401/transfers",
									"protocol": "http",
									"host": [
										"kuzimba",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4401",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_interoperable",
					"item": [
						{
							"name": "msisdn-to-msisdn",
							"item": [
								{
									"name": "alpteqictsols-to-skycode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7fc811eb-cda7-43a8-b8c3-b1c9a3dabc6e",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eb15eb6b-adf2-4c30-8b36-11076d4e5d3d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"alpteqictsolsFirst alpteqictsolsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"alpteqictsols",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "msisdn-to-bankaccount",
							"item": [
								{
									"name": "alpteqictsols-to-skycode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "39166fb1-ef12-4954-b046-e2a74bb47e36",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d25537e-7bfe-475e-91b2-f82fce9fc18e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"alpteqictsolsFirst alpteqictsolsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC033333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"alpteqictsols",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_forex",
					"item": [
						{
							"name": "EUR-to-ZMW",
							"item": [
								{
									"name": "affinity-to-greengrab(EUR to ZMW) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "db7e0191-07cc-4a0f-8bc9-22a859e92c40",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e79cce96-ef3a-44dd-a8f4-3a59c2c3d471",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://affinity.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"affinity",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "affinity-to-greengrab(EUR to ZMW) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "74e64d3e-a869-4940-830f-4fb3335605a2",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47e93690-6f95-4006-af27-a6844f9fd5ec",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://affinity.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"affinity",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "EUR-to-UGX",
							"item": [
								{
									"name": "kuzumba-to-wsacco(EUR to UGX) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d79f74d0-7d0b-4882-965d-eeec81a52762",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3f626d6c-607d-4a03-9ba9-ee188cf45c85",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978555555555\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256444444444\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kuzimba.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kuzimba",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "kuzumba-to-wsacco(EUR to UGX) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d5034d4-75db-4887-88a8-a868806e032e",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cdda5e33-cd5a-4afa-ad07-bb665259b2a6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978555555555\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256444444444\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kuzimba.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kuzimba",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_initiated_payments",
					"item": [
						{
							"name": "business",
							"item": [
								{
									"name": "alpteqictsols-to-teamtime",
									"item": [
										{
											"name": "alpteqictsols-to-teamtime- POST /requestToPay",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "33bbbdfa-a292-4cdf-aedf-d09fcfcda8be",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(`homeTransactionId is: ${pm.variables.get('homeTransactionId')}`, function () {",
															"    pm.expect(jsonData.homeTransactionId).to.eql(pm.variables.get('homeTransactionId'));",
															"});",
															"",
															"pm.test(`from.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('BUSINESS');",
															"    pm.environment.set('requestToPayInitiatorIdType',jsonData.from.idType);",
															"});",
															"",
															"",
															"pm.test(`to.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is EUR`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('EUR');",
															"});",
															"",
															"pm.test(`amount is 10`, function () {",
															"    pm.expect(jsonData.amount).to.eql('10');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`transactionRequestId is not null`, function () {",
															"    pm.expect(jsonData.transactionRequestId).to.not.equal('');",
															"    pm.environment.set('transactionRequestId',jsonData.transactionRequestId);",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`requestToPayState is RECEIVED`, function () {",
															"    pm.expect(jsonData.requestToPayState).to.eql('RECEIVED');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c2e6b540-1b73-44f2-a5aa-bfdba07e30c5",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"pm.variables.set('homeTransactionId',uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"homeTransactionId\": \"{{homeTransactionId}}\",\n    \"from\": {\n        \"idType\": \"BUSINESS\",\n        \"idValue\": \"alpteqictsolsMerchant\",\n        \"displayName\": \"Alpteqictsols Solutions\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978444444444\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"scenario\":\"PAYMENT\",\n    \"initiator\":\"PAYEE\",\n    \"initiatorType\":\"BUSINESS\",\n    \"note\": \"test payment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/requestToPay",
													"protocol": "http",
													"host": [
														"alpteqictsols",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4001",
													"path": [
														"requestToPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamtime - POST /requestToPayTransfer SEND",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6406adef-2e31-463e-a974-3bc716797f8a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`to.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is EUR}`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('EUR');",
															"});",
															"",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is WAITING_FOR_QUOTE_ACCEPTANCE`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('WAITING_FOR_QUOTE_ACCEPTANCE');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is EUR}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('EUR');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil is  null`, function () {",
															"    pm.expect(jsonData.fulfil).to.equal(undefined);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"requestToPayTransactionId\": \"{{transactionRequestId}}\",\n  \"from\": {\n    \"displayName\": \"Teamtime\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"978444444444\"\n  },\n  \"to\": {\n    \"idType\": \"{{requestToPayInitiatorIdType}}\",\n    \"idValue\": \"Alpteqictsols\",\n    \"fspId\": \"alpteqictsols\"\n  },\n  \"amountType\": \"SEND\",\n  \"currency\": \"EUR\",\n  \"amount\": \"10\",\n  \"scenario\":\"PAYMENT\",\n  \"initiator\":\"PAYEE\",\n  \"initiatorType\":\"BUSINESS\",\n  \"note\": \"test payment\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamtime.hipipo.mojaloop-hackathon.io:4301/requestToPayTransfer",
													"protocol": "http",
													"host": [
														"teamtime",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4301",
													"path": [
														"requestToPayTransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamtime - PUT /requestToPayTransfer/{Id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7bb7c270-6cca-4b19-912f-5a83b43c5f0d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"pm.test(`to.idType is BISUNESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is EUR`, function () {",
															"    pm.expect(jsonData.currency).to.eql('EUR');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is EUR}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('EUR');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`otpResponse is null`, function () {",
															"    pm.expect(jsonData.otpResponse).to.eql(undefined);",
															"});",
															"",
															"pm.test(`fulfil is not null`, function () {",
															"    pm.expect(jsonData.fulfil).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.completedTimestamp is not null`, function () {",
															"    pm.expect(jsonData.fulfil.completedTimestamp).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.transferState is COMMITTED`, function () {",
															"    pm.expect(jsonData.fulfil.transferState).to.eql('COMMITTED');",
															"});",
															"",
															"pm.test(`fulfil.fulfilment is not null`, function () {",
															"    pm.expect(jsonData.fulfil.fulfilment).to.not.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"acceptQuote\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamtime.hipipo.mojaloop-hackathon.io:4301/requestToPayTransfer/{{transactionRequestId}}",
													"protocol": "http",
													"host": [
														"teamtime",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4301",
													"path": [
														"requestToPayTransfer",
														"{{transactionRequestId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "67da8772-e7c2-46f4-ac5d-d7f62ef6c1c1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "64a56750-16d7-4993-baa5-3f49d0f4144d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}